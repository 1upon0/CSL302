type token =
  | NEWLINE
  | OR
  | AND
  | NOT
  | LPAREN
  | RPAREN
  | EQ
  | LESSEQ
  | GREATEREQ
  | LESS
  | GREATER
  | TRUE of (bool)
  | FALSE of (bool)
  | FNUM of (float)
  | INUM of (int)
  | IPLUS
  | IMINUS
  | IMULTIPLY
  | IDIVIDE
  | CARET
  | FPLUS
  | FMINUS
  | FMULTIPLY
  | FDIVIDE
  | IMOD
  | FMOD
  | IPOWER
  | FPOWER
  | VAR of (string)
  | FNCT of (float->float)

open Parsing;;
# 2 "Calc.mly"

open Printf
open Lexing

type ast = Empty| F of float | Node of string*ast*ast
let var_table = Hashtbl.create 16
let bvar_table = Hashtbl.create 16
type binop =
| Add
| Sub
| Mul
| Div
type expr =
| Var of string
| Binop of exp * binop * exp

(* print_op : Ast.binop - > unit *)
let print_op op = match op with
	| Add -> print_string "+"
	| Sub -> print_string "-"
	| Mul -> print_string "*"
	| Div -> print_string "/"
(* print_exp : Ast.exp -> unit *)
let rec print_exp expr = match expr with
	| Var v -> print_string v
	| Binop (exp0, op, exp1) -> begin
		print_string "(";
		print_exp exp0;
		print_op op;
		print_exp exp1;
		print_string ")";
		end
# 68 "Calc.ml"
let yytransl_const = [|
  257 (* NEWLINE *);
  258 (* OR *);
  259 (* AND *);
  260 (* NOT *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* EQ *);
  264 (* LESSEQ *);
  265 (* GREATEREQ *);
  266 (* LESS *);
  267 (* GREATER *);
  272 (* IPLUS *);
  273 (* IMINUS *);
  274 (* IMULTIPLY *);
  275 (* IDIVIDE *);
  276 (* CARET *);
  277 (* FPLUS *);
  278 (* FMINUS *);
  279 (* FMULTIPLY *);
  280 (* FDIVIDE *);
  281 (* IMOD *);
  282 (* FMOD *);
  283 (* IPOWER *);
  284 (* FPOWER *);
    0|]

let yytransl_block = [|
  268 (* TRUE *);
  269 (* FALSE *);
  270 (* FNUM *);
  271 (* INUM *);
  285 (* VAR *);
  286 (* FNCT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\000\000\002\000\001\000\002\000\002\000\002\000\001\000\001\000\
\001\000\003\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\003\000\003\000\
\003\000\001\000\001\000\003\000\001\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\003\000\000\000\000\000\026\000\
\027\000\007\000\008\000\000\000\000\000\000\000\000\000\002\000\
\000\000\000\000\006\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\025\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\031\000\000\000\011\000"

let yydgoto = "\002\000\
\003\000\016\000\020\000\018\000"

let yysindex = "\002\000\
\000\000\000\000\046\255\000\255\000\000\141\255\145\255\000\000\
\000\000\000\000\000\000\145\255\145\255\254\254\013\255\000\000\
\116\255\051\255\000\000\156\000\000\000\014\255\120\000\248\254\
\248\254\141\255\145\255\000\000\145\255\145\255\145\255\145\255\
\145\255\145\255\145\255\145\255\145\255\145\255\145\255\145\255\
\145\255\145\255\145\255\145\255\000\000\141\255\141\255\145\255\
\000\000\242\000\000\000\134\000\242\000\242\000\242\000\242\000\
\242\000\253\000\253\000\248\254\248\254\253\000\253\000\248\254\
\248\254\248\254\248\254\248\254\000\000\000\000\242\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\091\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\255\000\000\175\255\
\199\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\001\000\000\000\000\054\255\094\255\102\255\119\255\
\127\255\184\000\201\000\223\255\247\255\218\000\235\000\015\000\
\039\000\063\000\087\000\111\000\000\000\000\000\005\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\253\255\252\255"

let yytablesize = 545
let yytable = "\017\000\
\019\000\021\000\001\000\023\000\026\000\010\000\010\000\010\000\
\024\000\025\000\010\000\010\000\010\000\010\000\010\000\010\000\
\042\000\027\000\043\000\044\000\048\000\051\000\050\000\052\000\
\038\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\000\000\071\000\004\000\005\000\000\000\
\000\000\006\000\007\000\045\000\046\000\047\000\035\000\035\000\
\035\000\008\000\009\000\010\000\011\000\000\000\012\000\009\000\
\009\000\009\000\000\000\013\000\009\000\000\000\009\000\009\000\
\009\000\009\000\014\000\015\000\000\000\000\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\009\000\009\000\009\000\
\000\000\009\000\009\000\009\000\029\000\029\000\036\000\036\000\
\036\000\000\000\009\000\009\000\009\000\009\000\037\000\037\000\
\037\000\000\000\009\000\009\000\009\000\009\000\000\000\009\000\
\009\000\009\000\009\000\009\000\028\000\009\000\009\000\033\000\
\033\000\033\000\029\000\030\000\031\000\032\000\033\000\034\000\
\034\000\034\000\000\000\034\000\035\000\036\000\037\000\000\000\
\038\000\039\000\040\000\041\000\042\000\000\000\043\000\044\000\
\006\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\
\008\000\009\000\010\000\011\000\000\000\012\000\010\000\011\000\
\000\000\012\000\013\000\000\000\000\000\000\000\013\000\000\000\
\000\000\014\000\015\000\000\000\000\000\022\000\015\000\020\000\
\020\000\020\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\000\000\000\000\000\000\000\000\020\000\020\000\
\020\000\020\000\000\000\020\000\020\000\020\000\020\000\021\000\
\021\000\021\000\000\000\000\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\000\000\021\000\021\000\021\000\021\000\014\000\
\014\000\014\000\000\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\014\000\000\000\014\000\014\000\014\000\014\000\015\000\
\015\000\015\000\000\000\000\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\000\000\000\000\000\000\015\000\015\000\
\015\000\015\000\000\000\015\000\015\000\015\000\015\000\018\000\
\018\000\018\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\000\000\000\000\000\000\018\000\018\000\
\018\000\018\000\000\000\018\000\018\000\018\000\018\000\019\000\
\019\000\019\000\000\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\024\000\
\024\000\024\000\000\000\000\000\024\000\024\000\024\000\024\000\
\024\000\024\000\000\000\000\000\000\000\000\000\024\000\024\000\
\024\000\024\000\000\000\024\000\024\000\024\000\024\000\022\000\
\022\000\022\000\000\000\000\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\000\000\022\000\022\000\022\000\022\000\023\000\
\023\000\023\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\000\000\000\000\049\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\034\000\
\035\000\036\000\037\000\072\000\038\000\039\000\040\000\041\000\
\042\000\000\000\043\000\044\000\000\000\034\000\035\000\036\000\
\037\000\000\000\038\000\039\000\040\000\041\000\042\000\000\000\
\043\000\044\000\029\000\030\000\031\000\032\000\033\000\000\000\
\000\000\000\000\000\000\034\000\035\000\036\000\037\000\000\000\
\038\000\039\000\040\000\041\000\042\000\000\000\043\000\044\000\
\012\000\012\000\012\000\000\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\000\000\012\000\
\012\000\013\000\013\000\013\000\012\000\012\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\000\000\000\000\
\013\000\013\000\016\000\016\000\016\000\013\000\013\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\000\000\000\000\
\000\000\016\000\016\000\017\000\017\000\017\000\016\000\016\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
\000\000\000\000\017\000\017\000\000\000\000\000\000\000\017\000\
\017\000\034\000\035\000\036\000\037\000\000\000\038\000\039\000\
\040\000\041\000\042\000\000\000\043\000\044\000\036\000\037\000\
\000\000\000\000\000\000\040\000\041\000\042\000\010\000\043\000\
\044\000\000\000\000\000\000\000\010\000\010\000\010\000\010\000\
\010\000"

let yycheck = "\003\000\
\001\001\006\000\001\000\007\000\007\001\001\001\002\001\003\001\
\012\000\013\000\006\001\007\001\008\001\009\001\010\001\011\001\
\025\001\005\001\027\001\028\001\007\001\026\000\026\000\027\000\
\000\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\046\000\047\000\255\255\048\000\000\001\001\001\255\255\
\255\255\004\001\005\001\001\001\002\001\003\001\001\001\002\001\
\003\001\012\001\013\001\014\001\015\001\255\255\017\001\001\001\
\002\001\003\001\255\255\022\001\006\001\255\255\008\001\009\001\
\010\001\011\001\029\001\030\001\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\028\001\001\001\002\001\003\001\001\001\002\001\
\003\001\255\255\008\001\009\001\010\001\011\001\001\001\002\001\
\003\001\255\255\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\001\001\027\001\028\001\001\001\
\002\001\003\001\007\001\008\001\009\001\010\001\011\001\001\001\
\002\001\003\001\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\004\001\005\001\255\255\255\255\255\255\005\001\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\017\001\014\001\015\001\
\255\255\017\001\022\001\255\255\255\255\255\255\022\001\255\255\
\255\255\029\001\030\001\255\255\255\255\029\001\030\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\006\001\016\001\017\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\016\001\
\017\001\018\001\019\001\006\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\028\001\255\255\016\001\017\001\018\001\
\019\001\255\255\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\022\001\023\001\024\001\025\001\255\255\027\001\028\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\016\001\
\017\001\001\001\002\001\003\001\021\001\022\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\016\001\017\001\001\001\002\001\003\001\021\001\022\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\016\001\017\001\001\001\002\001\003\001\021\001\022\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\016\001\017\001\018\001\019\001\255\255\021\001\022\001\
\023\001\024\001\025\001\255\255\027\001\028\001\018\001\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\001\001\027\001\
\028\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001"

let yynames_const = "\
  NEWLINE\000\
  OR\000\
  AND\000\
  NOT\000\
  LPAREN\000\
  RPAREN\000\
  EQ\000\
  LESSEQ\000\
  GREATEREQ\000\
  LESS\000\
  GREATER\000\
  IPLUS\000\
  IMINUS\000\
  IMULTIPLY\000\
  IDIVIDE\000\
  CARET\000\
  FPLUS\000\
  FMINUS\000\
  FMULTIPLY\000\
  FDIVIDE\000\
  IMOD\000\
  FMOD\000\
  IPOWER\000\
  FPOWER\000\
  "

let yynames_block = "\
  TRUE\000\
  FALSE\000\
  FNUM\000\
  INUM\000\
  VAR\000\
  FNCT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "Calc.mly"
                   ( )
# 343 "Calc.ml"
               : expr	))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : expr	) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'line) in
    Obj.repr(
# 62 "Calc.mly"
              ( )
# 351 "Calc.ml"
               : expr	))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "Calc.mly"
               ( )
# 357 "Calc.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 65 "Calc.mly"
               ( printf "\t % f	 \n" _1;print_exp _1 ;flush stdout )
# 364 "Calc.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bexp) in
    Obj.repr(
# 66 "Calc.mly"
                ( printf "\t% b \n" _1; flush stdout )
# 371 "Calc.ml"
               : 'line))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "Calc.mly"
                 (printf "\t error \n" ; flush stdout )
# 377 "Calc.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 69 "Calc.mly"
          ( _1 )
# 384 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 71 "Calc.mly"
          (	
								float _1
								 )
# 393 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "Calc.mly"
         ( try Hashtbl.find var_table _1
				  with Not_found ->
				    printf "no such variable '%s'\n" _1;
				    0.0
				)
# 404 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 80 "Calc.mly"
               ( Hashtbl.replace var_table _1 _3;
				  printf "%s -> %f " _1 _3;
					_3
				)
# 415 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : float->float) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 84 "Calc.mly"
                          ( _1 _3 )
# 423 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 85 "Calc.mly"
                  (Binop (_1,Add,_3);
											_1 +. _3  )
# 432 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 87 "Calc.mly"
                   ( Binop (_1,Sub,_3);
												_1 -. _3)
# 441 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 89 "Calc.mly"
                     ( Binop (_1,Mul,_3);
												_1 *. _3 )
# 450 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 91 "Calc.mly"
                   ( Binop (_1,Div,_3);
											_1 /. _3)
# 459 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 93 "Calc.mly"
                  ( _1 +. _3 )
# 467 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 94 "Calc.mly"
                   ( _1 -. _3 )
# 475 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 95 "Calc.mly"
                     ( _1 *. _3 )
# 483 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 96 "Calc.mly"
                   ( _1 /. _3 )
# 491 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 97 "Calc.mly"
                        ( -. _2 )
# 498 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 98 "Calc.mly"
                        ( -. _2 )
# 505 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "Calc.mly"
                   ( _1 ** _3 )
# 513 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 100 "Calc.mly"
                   ( _1 ** _3 )
# 521 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 101 "Calc.mly"
                   (float (int_of_float _1 mod int_of_float _3) )
# 529 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 102 "Calc.mly"
                     ( _2 )
# 536 "Calc.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 104 "Calc.mly"
           ( _1 )
# 543 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 105 "Calc.mly"
         ( _1 )
# 550 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 106 "Calc.mly"
                ( _1 || _3 )
# 558 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "Calc.mly"
         ( try Hashtbl.find bvar_table _1
				  with Not_found ->
				    printf "no such variable '%s'\n" _1;
				    false
				)
# 569 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 112 "Calc.mly"
                ( Hashtbl.replace bvar_table _1 _3;
				  _3
				)
# 579 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 115 "Calc.mly"
                 ( _1 & _3 )
# 587 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 116 "Calc.mly"
            ( not _2 )
# 594 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 117 "Calc.mly"
                ( _1 < _3 )
# 602 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 118 "Calc.mly"
                   ( _1 > _3 )
# 610 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 119 "Calc.mly"
              ( _1 = _3 )
# 618 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "Calc.mly"
                  ( _1 <= _3 )
# 626 "Calc.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "Calc.mly"
                     ( _1 >= _3 )
# 634 "Calc.ml"
               : 'bexp))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : expr	)
;;
